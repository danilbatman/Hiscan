// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  passwordHash   String
  name           String?
  createdAt      DateTime        @default(now())
  analyses       Analysis[]
  subscriptions  Subscription[]
}

model Analysis {
  id            String         @id @default(cuid())
  user          User?          @relation(fields: [userId], references: [id])
  userId        String?
  type          String
  title         String?
  rawText       String?
  aiSummary     String?
  aiFindings    Json?
  measurements  Measurement[]
  files         UploadedFile[]
  createdAt     DateTime       @default(now())

  @@index([userId])
  @@index([createdAt])
}

model Measurement {
  id             String    @id @default(cuid())
  analysis       Analysis  @relation(fields: [analysisId], references: [id])
  analysisId     String
  name           String
  value          Float
  unit           String?
  referenceLow   Float?
  referenceHigh  Float?
}

model UploadedFile {
  id         String    @id @default(cuid())
  analysis   Analysis  @relation(fields: [analysisId], references: [id])
  analysisId String
  filename   String
  mimeType   String
  sizeBytes  Int
  path       String
  createdAt  DateTime  @default(now())
}

model SubscriptionPlan {
  id            String           @id @default(cuid())
  name          String
  slug          String           @unique
  priceCents    Int
  features      Json
  active        Boolean          @default(true)
  createdAt     DateTime         @default(now())
  subscriptions Subscription[]
}

model Subscription {
  id               String            @id @default(cuid())
  user             User              @relation(fields: [userId], references: [id])
  userId           String
  plan             SubscriptionPlan  @relation(fields: [planId], references: [id])
  planId           String
  status           String
  currentPeriodEnd DateTime?
  createdAt        DateTime          @default(now())

  @@index([userId])
  @@index([planId])
}
